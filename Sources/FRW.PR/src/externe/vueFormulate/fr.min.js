var VueFormulateI18n = function (e) {
    "use strict";
    function r(e) {
        return "string" == typeof e ? e[0].toUpperCase() + e.substr(1) : e
    }
    //Ne remplacer que la ligne suivante.
    var n = { accepted: function ({ name: e }) { return `Merci d'accepter les ${e}.` }, after: function ({ name: e, args: r }) { return Array.isArray(r) && r.length ? `${s(e)} doit être postérieur à ${r[0]}.` : `${s(e)} doit être une date ultérieure.` }, alpha: function ({ name: e }) { return `${s(e)} peut uniquement contenir des lettres.` }, alphanumeric: function ({ name: e }) { return `${s(e)} peut uniquement contenir des lettres ou des chiffres` }, before: function ({ name: e, args: r }) { return Array.isArray(r) && r.length ? `${s(e)} doit être antérieur à ${r[0]}.` : `${s(e)} doit être une date antérieure.` }, between: function ({ name: e, value: r, args: n }) { const t = !(!Array.isArray(n) || !n[2]) && n[2]; return !isNaN(r) && "length" !== t || "value" === t ? `${s(e)} doit être compris entre ${n[0]} et ${n[1]}.` : `${s(e)} doit être compris entre ${n[0]} et ${n[1]} caractères.` }, confirm: function ({ name: e, args: r }) { return `${s(e)} ne correspond pas.` }, date: function ({ name: e, args: r }) { return Array.isArray(r) && r.length ? `${s(e)} n'est pas valide.  Merci d'utiliser le format ${r[0]}` : `${s(e)} n'est pas une date valide.` }, default: function ({ name: e }) { return "Ce champ n'est pas valide." }, email: function ({ name: e, value: r }) { return r ? `“${r}” n'est pas une adresse email valide.` : "Merci d'entrer une adresse email valide." }, endsWith: function ({ name: e, value: r }) { return r ? `“${r}” ne termine pas par une valeur correcte.` : "Ce champ ne termine pas par une valeur correcte." }, in: function ({ name: e, value: r }) { return "string" == typeof r && r ? `“${s(r)}” n'est pas un(e) ${e} autorisé(e).` : `Cette valeur n'est pas un(e) ${e} autorisé(e).` }, matches: function ({ name: e }) { return `${s(e)} n'est pas une valeur autorisée.` }, max: function ({ name: e, value: r, args: n }) { if (r.hasOwnProperty("uploadPromise")) return `Le champ « ${e} » ne doit pas contenir plus de ${n[0]} fichier(s).`; if (Array.isArray(r)) return `Vous pouvez uniquement sélectionner ${n[0]} ${e}.`; const t = !(!Array.isArray(n) || !n[1]) && n[1]; return !isNaN(r) && "length" !== t || "value" === t ? `${s(e)} doit être inférieur ou égal à ${n[0]}.` : `${s(e)} doit être inférieur ou égal à ${n[0]} caractères.` }, mime: function ({ name: e, args: r }) { return `${s(e)} doit être de type: ${r[0] || "Aucun format autorisé."}` }, min: function ({ name: e, value: r, args: n }) { if (r.hasOwnProperty("uploadPromise")) return `Le champ « ${e} » doit contenir au moins ${n[0]} fichier(s).`; if (Array.isArray(r)) return `Vous devez sélectionner au moins ${n[0]} ${e}.`; const t = !(!Array.isArray(n) || !n[1]) && n[1]; return !isNaN(r) && "length" !== t || "value" === t ? `${s(e)} doit être supérieur à ${n[0]}.` : `${s(e)} doit être plus long que ${n[0]} caractères.` }, not: function ({ name: e, value: r }) { return `“${r}” n'est pas un(e) ${e} autorisé(e).` }, number: function ({ name: e }) { return `${s(e)} doit être un nombre.` }, required: function ({ name: e }) { return `${s(e)} est obligatoire.` }, startsWith: function ({ name: e, value: r }) { return r ? `“${r}” ne commence pas par une valeur correcte.` : "Ce champ ne commence pas par une valeur correcte." }, url: function ({ name: e }) { return "Merci d'entrer une URL valide." } };
    return e.fr = function (e) { var r; e.extend({ locales: (r = {}, r.fr = n, r) }) }, e
}({});