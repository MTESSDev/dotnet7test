var VueFormulateI18nEn = function (e) {
    "use strict";
    function r(e) {
        return "string" == typeof e ? e[0].toUpperCase() + e.substr(1) : e
    }
    //Ne remplacer que la ligne suivante.
    var n = { accepted: function ({ name: e }) { return `Please accept the ${e}.` }, after: function ({ name: e, args: a }) { return Array.isArray(a) && a.length ? `${s(e)} must be after ${a[0]}.` : `${s(e)} must be a later date.` }, alpha: function ({ name: e }) { return `${s(e)} can only contain alphabetical characters.` }, alphanumeric: function ({ name: e }) { return `${s(e)} can only contain letters and numbers.` }, before: function ({ name: e, args: a }) { return Array.isArray(a) && a.length ? `${s(e)} must be before ${a[0]}.` : `${s(e)} must be an earlier date.` }, between: function ({ name: e, value: a, args: n }) { const t = !(!Array.isArray(n) || !n[2]) && n[2]; return !isNaN(a) && "length" !== t || "value" === t ? `${s(e)} must be between ${n[0]} and ${n[1]}.` : `${s(e)} must be between ${n[0]} and ${n[1]} characters long.` }, confirm: function ({ name: e, args: a }) { return `${s(e)} does not match.` }, date: function ({ name: e, args: a }) { return Array.isArray(a) && a.length ? `${s(e)} is not a valid date, please use the format ${a[0]}` : `${s(e)} is not a valid date.` }, default: function ({ name: e }) { return "This field isn’t valid." }, email: function ({ name: e, value: a }) { return a ? `“${a}” is not a valid email address.` : "Please enter a valid email address." }, endsWith: function ({ name: e, value: a }) { return a ? `“${a}” doesn’t end with a valid value.` : "This field doesn’t end with a valid value." }, in: function ({ name: e, value: a }) { return "string" == typeof a && a ? `“${s(a)}” is not an allowed ${e}.` : `This is not an allowed ${e}.` }, matches: function ({ name: e }) { return `${s(e)} is not an allowed value.` }, max: function ({ name: e, value: a, args: n }) { if (a.hasOwnProperty("uploadPromise")) return `The "${e}" can only contain ${n[0]} file(s).`; if (Array.isArray(a)) return `You may only select ${n[0]} ${e}.`; const t = !(!Array.isArray(n) || !n[1]) && n[1]; return !isNaN(a) && "length" !== t || "value" === t ? `${s(e)} must be less than or equal to ${n[0]}.` : `${s(e)} must be less than or equal to ${n[0]} characters long.` }, mime: function ({ name: e, args: a }) { return `${s(e)} must be of the type: ${a[0] || "No file formats allowed."}` }, min: function ({ name: e, value: a, args: n }) { if (a.hasOwnProperty("uploadPromise")) return `The "${e}" field need at least ${n[0]} file(s).`; if (Array.isArray(a)) return `You need at least ${n[0]} ${e}.`; const t = !(!Array.isArray(n) || !n[1]) && n[1]; return !isNaN(a) && "length" !== t || "value" === t ? `${s(e)} must be at least ${n[0]}.` : `${s(e)} must be at least ${n[0]} characters long.` }, not: function ({ name: e, value: a }) { return `“${a}” is not an allowed ${e}.` }, number: function ({ name: e }) { return `${s(e)} must be a number.` }, required: function ({ name: e }) { return `${s(e)} is required.` }, startsWith: function ({ name: e, value: a }) { return a ? `“${a}” doesn’t start with a valid value.` : "This field doesn’t start with a valid value." }, url: function ({ name: e }) { return "Please include a valid url." } };
    return e.en = function (e) { var r; e.extend({ locales: (r = {}, r.en = n, r) }) }, e
}({});